---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: {{.rabbitmq.namespace}}
  labels:
    app: rabbitmq
spec:
  serviceName: rabbitmq
  replicas: {{ .rabbitmq.replica }}
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
{{- if not .dev }}
{{- if .rabbitmq.affinity_key }}
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: {{.rabbitmq.affinity_key}}
              operator: In
              values:
              - {{.rabbitmq.affinity_selector}}
{{- end }}
{{- end }}
      serviceAccountName: rabbitmq
      terminationGracePeriodSeconds: 10
      initContainers:
      - name: tmp
        image: busybox
        command:
        - 'sh'
        - '-c'
        - >
          wget -O /tmp/delay_plugin.zip https://dl.bintray.com/rabbitmq/community-plugins/3.7.x/rabbitmq_delayed_message_exchange/rabbitmq_delayed_message_exchange-20171201-3.7.x.zip;
          unzip /tmp/delay_plugin.zip -d /tmp/rabbitmq;
        volumeMounts:
        - name: tmp-rabbitmq
          mountPath: /tmp/rabbitmq
      containers:
      - name: rabbitmq
        image: {{.rabbitmq.image}}
        # command:
        # - /bin/bash
        # - -c
        # - >
        #   while true; do sleep 2; done;
        lifecycle:
          postStart:
            exec:
              command:
              - "/bin/sh"
              - "-c"
              - >
                 cp /tmp/rabbitmq/* /plugins/;
        ports:
        - name: http
          containerPort: 15672
        - name: tcp-amqp
          containerPort: 5672
        - name: tcp-epmd
          containerPort: 4369
        - name: tcp-dist
          containerPort: 25672
        # livenessProbe:
        #   exec:
        #     command: ["rabbitmqctl", "status"]
        #   initialDelaySeconds: 60
        #   timeoutSeconds: 60
        # readinessProbe:
        #   exec:
        #     command: ["rabbitmqctl", "status"]
        #   initialDelaySeconds: 60
        #   timeoutSeconds: 60
        env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: RABBITMQ_USE_LONGNAME
          value: "true"
        - name: RABBITMQ_ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: cookie
              key: rabbitmq.cookie
        - name: RABBITMQ_NODENAME
          value: "rabbit@localhost"
          # value: "rabbit@$(MY_POD_IP)"
        - name: AUTOCLUSTER_TYPE
          value: "k8s"
        - name: AUTOCLUSTER_DELAY
          value: "10"
        - name: AUTOCLUSTER_CLEANUP
          value: "true"
        - name: CLEANUP_WARN_ONLY
          value: "false"
        resources:
          requests:
{{- if ne .rabbitmq.resources.requests.memory "" }}
            memory: "{{ .rabbitmq.resources.requests.memory }}"
{{- end }}
{{- if ne .rabbitmq.resources.requests.cpu "" }}
            cpu: "{{ .rabbitmq.resources.requests.cpu }}"
{{- end }}
          limits:
{{- if ne .rabbitmq.resources.limits.memory "" }}
            memory: "{{ .rabbitmq.resources.limits.memory }}"
{{- end }}
{{- if ne .rabbitmq.resources.limits.cpu "" }}
            cpu: "{{ .rabbitmq.resources.limits.cpu }}"
{{- end }}
        volumeMounts:
        - name: rabbitmq-configs
          mountPath: /etc/rabbitmq
        - name: rabbitmq-definitions
          mountPath: /tmp/definitions.json
          subPath: definitions.json
        - name: data
          mountPath: /var/lib/rabbitmq
          subPath: rabbitmq
        - name: tmp-rabbitmq
          mountPath: /tmp/rabbitmq
      volumes:
      - name: tmp-rabbitmq
        emptyDir: {}
      - name: rabbitmq-configs
        configMap:
          name: rabbitmq-config
          items:
          - key: rabbitmq.conf
            path: rabbitmq.conf
          - key: enabled_plugins
            path: enabled_plugins
      - name: rabbitmq-definitions
        configMap:
          name: rabbitmq-config
          items:
          - key: rabbitmq.definitions
            path: definitions.json
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: volume
        component: rabbitmq
        role: services
    spec:
      accessModes:
      - "ReadWriteOnce"
      storageClassName: {{.rabbitmq.storage_class}}
      resources:
        requests:
          storage: {{.rabbitmq.storage_size}}
